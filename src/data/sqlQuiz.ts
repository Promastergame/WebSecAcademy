import { QuizQuestion } from '@/types/sql';

export const sqlQuizQuestions: QuizQuestion[] = [
  {
    id: 1,
    question: 'Какой главный механизм защиты от SQL-инъекций?',
    options: [
      'Ручное экранирование спецсимволов',
      'Параметризованные запросы (Prepared Statements)',
      'Валидация на фронтенде',
      'Использование ORM без дополнительных проверок',
    ],
    correctIndex: 1,
    explanation:
      'Prepared Statements отделяют SQL-код от данных на уровне протокола. Данные передаются отдельно и никогда не интерпретируются как код.',
  },
  {
    id: 2,
    question: 'Что происходит при SQL-инъекции через параметр id?',
    options: [
      'Сервер падает с ошибкой',
      'Злоумышленник может извлечь данные или изменить логику запроса',
      'База данных автоматически блокирует запрос',
      'Ничего, если используется HTTPS',
    ],
    correctIndex: 1,
    explanation:
      'Инъекция позволяет встроить вредоносный SQL-код (UNION, OR 1=1, комментарии --), что ведёт к утечке данных, обходу аутентификации или удалению записей.',
  },
  {
    id: 3,
    question: 'Почему опасна конкатенация строк в SQL-запросах?',
    options: [
      'Медленная производительность',
      'Пользовательский ввод становится частью SQL-кода',
      'Нарушение синтаксиса SQL',
      'Проблемы с кодировкой символов',
    ],
    correctIndex: 1,
    explanation:
      'При конкатенации строк пользовательские данные напрямую попадают в SQL-код, позволяя злоумышленнику закрыть кавычки и добавить свои команды.',
  },
  {
    id: 4,
    question: 'Что такое Blind SQL Injection?',
    options: [
      'Инъекция без использования кавычек',
      'Атака, где приложение не выводит результаты запроса напрямую',
      'Инъекция через закрытый API',
      'Автоматизированная атака ботами',
    ],
    correctIndex: 1,
    explanation:
      'Blind SQLi использует косвенные признаки (Boolean-based: изменение поведения приложения, Time-based: задержки) для извлечения данных побайтово.',
  },
  {
    id: 5,
    question: 'Какой SQL-оператор часто используется для объединения результатов при инъекции?',
    options: ['JOIN', 'UNION', 'MERGE', 'CONCAT'],
    correctIndex: 1,
    explanation:
      'UNION позволяет объединить результаты двух SELECT-запросов. Злоумышленник может добавить UNION SELECT для извлечения данных из других таблиц.',
  },
  {
    id: 6,
    question: 'Почему комментарии (-- или /* */) опасны в контексте SQL-инъекций?',
    options: [
      'Они замедляют выполнение запроса',
      'Позволяют игнорировать оставшуюся часть запроса',
      'Нарушают формат логов',
      'Создают синтаксические ошибки',
    ],
    correctIndex: 1,
    explanation:
      'Комментарии отсекают остаток SQL-команды, позволяя злоумышленнику убрать проверки (например, AND password=... превращается в комментарий).',
  },
  {
    id: 7,
    question: 'Достаточно ли использовать ORM для защиты от SQL-инъекций?',
    options: [
      'Да, ORM полностью защищает',
      'Нет, если использовать raw SQL или небезопасные методы',
      'Да, если ORM платный',
      'Нет, ORM вообще не защищает',
    ],
    correctIndex: 1,
    explanation:
      'ORM предоставляет безопасные методы, но разработчики могут использовать raw SQL или небезопасные функции (например, .raw(), query builder с конкатенацией).',
  },
  {
    id: 8,
    question: 'Какой принцип минимизирует урон от успешной SQL-инъекции?',
    options: [
      'Использование сложных паролей',
      'Минимальные привилегии БД (принцип наименьших привилегий)',
      'Шифрование трафика',
      'Частое резервное копирование',
    ],
    correctIndex: 1,
    explanation:
      'Если сервисный пользователь БД имеет только SELECT/INSERT/UPDATE на нужные таблицы (без DROP, DELETE, GRANT), злоумышленник не сможет удалить базу или получить админские права.',
  },
  {
    id: 9,
    question: 'Что такое Time-based Blind SQL Injection?',
    options: [
      'Инъекция, которая выполняется медленно',
      'Использование функций задержки (SLEEP, WAITFOR) для извлечения данных',
      'Атака только в ночное время',
      'Инъекция с использованием таймеров JavaScript',
    ],
    correctIndex: 1,
    explanation:
      'Злоумышленник добавляет условия с задержкой (IF(condition, SLEEP(5), 0)). Если ответ задерживается, значит условие истинно — так извлекаются данные побитово.',
  },
  {
    id: 10,
    question: 'Как проверить параметр id на безопасность?',
    options: [
      'Заменить все буквы на цифры',
      'Валидировать тип (число/UUID), использовать whitelist и prepared statements',
      'Удалить все спецсимволы',
      'Проверить длину строки',
    ],
    correctIndex: 1,
    explanation:
      'Валидация типа (parseInt, UUID regex), whitelist допустимых символов, отклонение аномалий + использование параметризованных запросов — комплексная защита.',
  },
];
